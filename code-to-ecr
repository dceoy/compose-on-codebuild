#!/usr/bin/env bash
#
# Docker Image Builder using AWS CodeBuild
#
# Usage:
#   code-to-ecr [--debug] [-f|--force] [--profile=<str>]
#     [--codebuild-project=<name>] [--image-tag=<str>]
#     [--codecommit-repo-branch=<name>] [--dockerfile=<name>]
#     [--docker-build-context=<path>] [--docker-build-arg=<str>]
#     [--dockerhub-user=<name>] [--dockerhub-token=<str>]
#     [--environment-type=<name>] [--environment-image=<name>]
#     [--environment-compute-type=<name>] <codecommit_repo_name>
#     <image_repo_name>
#   code-to-ecr --version
#   code-to-ecr -h|--help
#
# Options:
#   --debug                 Enable debug mode
#   -f, --force             Use -f option for git push
#   --profile=<str>         Specify a profile from a credential file
#   --codebuild-project=<name>
#                           Specify an AWS CodeBuild project
#                           [default: code-to-ecr]
#   --image-tag=<str>       Specify a Docker image tag [default: latest]
#   --codecommit-repo-branch=<name>
#                           Specify a CodeCommit repository branch
#   --dockerfile=<name>     Specify a Dockerfile name [default: Dockerfile]
#   --docker-build-context=<path>
#                           Specify a Docker build context path [default: .]
#   --docker-build-arg=<str>
#                           Set Docker build-time variables
#   --dockerhub-user=<name>
#                           Set Docker Hub user name
#   --dockerhub-token=<str>
#                           Set Docker Hub user token
#   --environment-type=<name>
#                           Set an environment type [default: LINUX_CONTAINER]
#   --environment-image=<name>
#                           Set an environment image
#                           [default: aws/codebuild/standard:6.0]
#   --environment-compute-type=<name>
#                           Set an environment compute type
#                           [default: BUILD_GENERAL1_SMALL]
#   --version               Print version information and exit
#   -h, --help              Print this help text and exit
#
# Arguments:
#   <git_repo_path>         Path to a local Git repository including Dockerfile
#   <codecommit_repo_name>  AWS CodeCommit repository name
#   <image_repo_name>       Docker image repository name


set -euo pipefail

if [[ ${#} -ge 1 ]]; then
  for a in "${@}"; do
    [[ "${a}" = '--debug' ]] && set -x && break
  done
fi

COMMAND_PATH=$(realpath "${0}")
COMMAND_NAME=$(basename "${COMMAND_PATH}")
COMMAND_VERSION='v0.0.4'
FORCE=0
AWS_PROFILE=''
CODEBUILD_PROJECT_NAME='code-to-ecr'
IMAGE_TAG='latest'
CODECOMMIT_REPO_BRANCH=''
DOCKERFILE_NAME='Dockerfile'
DOCKER_BUILD_CONTEXT='.'
DOCKER_BUILD_ARG=''
DOCKERHUB_USER=''
DOCKERHUB_TOKEN=''
ENVIRONMENT_TYPE='LINUX_CONTAINER'
ENVIRONMENT_IMAGE='aws/codebuild/standard:6.0'
ENVIRONMENT_COMPUTE_TYPE='BUILD_GENERAL1_SMALL'
ARGV=()

function print_version {
  echo -e "${COMMAND_NAME}: ${COMMAND_VERSION}"
}

function print_usage {
  sed -ne '1,2d; /^#/!q; s/^#$/# /; s/^# //p;' "${COMMAND_PATH}"
}

function abort {
  {
    if [[ ${#} -eq 0 ]]; then
      cat -
    else
      COMMAND_NAME=$(basename "${COMMAND_PATH}")
      echo -e "${COMMAND_NAME}: ${*}"
    fi
  } >&2
  exit 1
}

while [[ ${#} -ge 1 ]]; do
  {
    case "${1}" in
      -h | --help )
        print_usage && exit 0
        ;;
      --version )
        print_version && exit 0
        ;;
      --debug )
        shift 1
        ;;
      -f | --force )
        FORCE=1 && shift 1
        ;;
      --profile )
        AWS_PROFILE="${2}" && shift 2
        ;;
      --profile=* )
        AWS_PROFILE="${1#*\=}" && shift 1
        ;;
      --codebuild-project )
        CODEBUILD_PROJECT_NAME="${2}" && shift 2
        ;;
      --codebuild-project=* )
        CODEBUILD_PROJECT_NAME="${1#*\=}" && shift 1
        ;;
      --image-tag )
        IMAGE_TAG="${2}" && shift 2
        ;;
      --image-tag=* )
        IMAGE_TAG="${1#*\=}" && shift 1
        ;;
      --codecommit-repo-branch )
        CODECOMMIT_REPO_BRANCH="${2}" && shift 2
        ;;
      --codecommit-repo-branch=* )
        CODECOMMIT_REPO_BRANCH="${1#*\=}" && shift 1
        ;;
      --dockerfile )
        DOCKERFILE_NAME="${2}" && shift 2
        ;;
      --dockerfile=* )
        DOCKERFILE_NAME="${1#*\=}" && shift 1
        ;;
      --docker-build-context )
        DOCKER_BUILD_CONTEXT="${2}" && shift 2
        ;;
      --docker-build-context=* )
        DOCKER_BUILD_CONTEXT="${1#*\=}" && shift 1
        ;;
      --docker-build-arg )
        DOCKER_BUILD_ARG="${2}" && shift 2
        ;;
      --docker-build-arg=* )
        DOCKER_BUILD_ARG="${1#*\=}" && shift 1
        ;;
      --dockerhub-user )
        DOCKERHUB_USER="${2}" && shift 2
        ;;
      --dockerhub-user=* )
        DOCKERHUB_USER="${1#*\=}" && shift 1
        ;;
      --dockerhub-token )
        DOCKERHUB_TOKEN="${2}" && shift 2
        ;;
      --dockerhub-token=* )
        DOCKERHUB_TOKEN="${1#*\=}" && shift 1
        ;;
      --environment-type )
        ENVIRONMENT_TYPE="${2}" && shift 2
        ;;
      --environment-type=* )
        ENVIRONMENT_TYPE="${1#*\=}" && shift 1
        ;;
      --environment-image )
        ENVIRONMENT_IMAGE="${2}" && shift 2
        ;;
      --environment-image=* )
        ENVIRONMENT_IMAGE="${1#*\=}" && shift 1
        ;;
      --environment-compute-type )
        ENVIRONMENT_COMPUTE_TYPE="${2}" && shift 2
        ;;
      --environment-compute-type=* )
        ENVIRONMENT_COMPUTE_TYPE="${1#*\=}" && shift 1
        ;;
      -* )
        abort "invalid option: ${1}"
        ;;
      * )
        ARGV=("${@:1}") && break
        ;;
    esac
  } || exit 1
done

[[ ${#ARGV[@]} -eq 3 ]] || abort 'invalid argument'
LOCAL_GIT_REPO_PATH="${ARGV[0]}"
CODECOMMIT_REPO_NAME="${ARGV[1]}"
IMAGE_REPO_NAME="${ARGV[2]}"

cd "${LOCAL_GIT_REPO_PATH}"
LOCAL_GIT_REPO_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
[[ -n "${CODECOMMIT_REPO_BRANCH}" ]] \
  || CODECOMMIT_REPO_BRANCH="${LOCAL_GIT_REPO_BRANCH}"

echo '>> Print configurations:'
echo "  AWSCLI:                   $(aws --version)"
echo "  GIT:                      $(git --version)"
echo "  AWS_PROFILE:              ${AWS_PROFILE}"
echo "  CODEBUILD_PROJECT_NAME:   ${CODEBUILD_PROJECT_NAME}"
echo "  LOCAL_GIT_REPO_PATH:      ${LOCAL_GIT_REPO_PATH}"
echo "  LOCAL_GIT_REPO_BRANCH:    ${LOCAL_GIT_REPO_BRANCH}"
echo "  CODECOMMIT_REPO_NAME:     ${CODECOMMIT_REPO_NAME}"
echo "  CODECOMMIT_REPO_BRANCH:   ${CODECOMMIT_REPO_BRANCH}"
echo "  IMAGE_REPO_NAME:          ${IMAGE_REPO_NAME}"
echo "  IMAGE_TAG:                ${IMAGE_TAG}"
echo "  DOCKERFILE_NAME:          ${DOCKERFILE_NAME}"
echo "  DOCKER_BUILD_CONTEXT:     ${DOCKER_BUILD_CONTEXT}"
[[ -z "${DOCKER_BUILD_ARG}" ]] \
  || echo "  DOCKER_BUILD_ARG:         ${DOCKER_BUILD_ARG}"
[[ -z "${DOCKERHUB_USER}" ]] \
  || echo "  DOCKERHUB_USER:           ${DOCKERHUB_USER}"

if [[ -n "${AWS_PROFILE}" ]]; then
  aws="aws --profile ${AWS_PROFILE}"
else
  aws='aws'
fi

echo '>> Check the CodeCommit repository.'
if ! ${aws} codecommit get-repository \
  --repository-name "${CODECOMMIT_REPO_NAME}"
then
  echo '>> Create the CodeCommit repository.'
  ${aws} codecommit create-repository \
    --repository-name "${CODECOMMIT_REPO_NAME}"
fi

echo '>> Push a Git repository to AWS CodeCommit.'
if [[ ${FORCE} -eq 0 ]]; then
  git_push='git push'
else
  git_push='git push -f'
fi
if [[ -n "${AWS_PROFILE}" ]]; then
  git_remote_repo="codecommit://${AWS_PROFILE}@${CODECOMMIT_REPO_NAME}"
else
  git_remote_repo="codecommit://${CODECOMMIT_REPO_NAME}"
fi
${git_push} \
  "${git_remote_repo}" \
  "${LOCAL_GIT_REPO_BRANCH}:${CODECOMMIT_REPO_BRANCH}"

echo '>> Check the ECR repository.'
if ! ${aws} ecr describe-repositories \
  --repository-names "${IMAGE_REPO_NAME}"
then
  echo '>> Create the ECR repository.'
  ${aws} ecr create-repository \
    --repository-name "${IMAGE_REPO_NAME}"
fi

echo '>> Start building a Docker image using CodeBuild.'
source_location_override="$( \
  ${aws} codecommit get-repository \
    --repository-name "${CODECOMMIT_REPO_NAME}" \
    | grep -e 'cloneUrlHttp' | cut -d \" -f 4 \
)"
environment_variables_override="[
  {\"name\": \"IMAGE_REPO_NAME\", \"value\": \"${IMAGE_REPO_NAME}\"},
  {\"name\": \"IMAGE_TAG\", \"value\": \"${IMAGE_TAG}\"},
  {\"name\": \"DOCKERFILE_NAME\", \"value\": \"${DOCKERFILE_NAME}\"},
  {\"name\": \"DOCKER_BUILD_CONTEXT\", \"value\": \"${DOCKER_BUILD_CONTEXT}\"},
  {\"name\": \"DOCKER_BUILD_ARG\", \"value\": \"${DOCKER_BUILD_ARG}\"},
  {\"name\": \"DOCKERHUB_USER\", \"value\": \"${DOCKERHUB_USER}\"},
  {\"name\": \"DOCKERHUB_TOKEN\", \"value\": \"${DOCKERHUB_TOKEN}\"}
]"
${aws} codebuild start-build \
  --project-name "${CODEBUILD_PROJECT_NAME}" \
  --source-type-override CODECOMMIT \
  --environment-variables-override "${environment_variables_override}" \
  --environment-type-override "${ENVIRONMENT_TYPE}" \
  --image-override "${ENVIRONMENT_IMAGE}" \
  --compute-type-override "${ENVIRONMENT_COMPUTE_TYPE}" \
  --source-location-override "${source_location_override}" \
  --source-version "${CODECOMMIT_REPO_BRANCH}"
